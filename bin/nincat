#!/usr/bin/env python3

# Copyright (c) 2012, Somia Reality Oy
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

import argparse
import asyncio
import json
import logging
import signal
import sys

from ninchat.client.cffi.asyncio import Session

errors = False


def error(message, error_event):
    global errors
    errors = True

    s = error_event.get("error_reason")
    if s:
        reason = " ({})".format(s)
    else:
        reason = ""

    print("{}: {}{}".format(message, error_event.get("error_type"), reason), file=sys.stderr)


async def main():
    logging.basicConfig(level=logging.INFO)

    parser = argparse.ArgumentParser()
    parser.add_argument("-u", "--user", metavar="FILE", default=".nincat",
                        help='file for storing credentials (defaults to ".nincat")')
    parser.add_argument("--create-user", metavar="NAME",
                        help="create a user account and write login info to FILE")
    parser.add_argument("--delete-user", action="store_true",
                        help="delete the user account specified by FILE")
    parser.add_argument("--set-email", metavar="ADDRESS",
                        help="make the user permanent (after email verification)")
    parser.add_argument("-j", "--join", action="store_true",
                        help="join the specified channels (instead of sending)")
    parser.add_argument("-p", "--part", action="store_true",
                        help="part from the specified channels (instead of sending)")
    parser.add_argument("-l", "--listen", action="store_true",
                        help="print received messages to stdout until terminated")
    parser.add_argument("channels", metavar="ID", nargs="*",
                        help="send lines from stdin to this channel id")
    args = parser.parse_args()

    echo = args.channels and not (args.join or args.part)

    if not (args.create_user or
            args.set_email or
            args.join or
            echo or
            args.part or
            args.delete_user or
            args.listen):
        parser.print_help()
        sys.exit(1)

    session_params = {
        "message_types": ["ninchat.com/text"] if (echo or args.listen) else [],
    }

    if args.create_user:
        session_params["user_attrs"] = {
            "name": args.create_user,
        }
    else:
        with open(args.user) as f:
            session_params["user_id"] = f.readline().strip()
            session_params["user_auth"] = f.readline().strip()

    def on_event(event, payload, final):
        if event["event"] != "message_received":
            return

        if not args.listen:
            return

        if args.channels and event["channel_id"] not in args.channels:
            return

        content = json.loads(payload[0].decode())
        print("<%s> %s" % (event["message_user_name"], content["text"]))

    session = Session()
    session.on_session_event = lambda event: None
    session.on_event = on_event
    session.set_params(session_params)

    try:
        event = await session.open()
        if event["event"] != "session_created":
            error("create_session", event)
            sys.exit(2)

        if args.create_user:
            with open(args.user, "w") as f:
                print(event["user_id"], file=f)
                print(event["user_auth"], file=f)

        if args.set_email:
            event, _ = await session.call(dict(
                action="create_identity",
                identity_type="email",
                identity_name=args.set_email,
            ))
            if event["event"] == "error":
                error("create_identity", event)

        if args.join:
            for channel_id in args.channels:
                event, _ = await session.call(dict(
                    action="join_channel",
                    channel_id=channel_id,
                ))
                if event["event"] == "error":
                    error("join_channel {}".format(channel_id), event)

        if echo:
            while True:
                line = sys.stdin.readline()
                if not line:
                    break

                for channel_id in args.channels:
                    print("sending", line)

                    event, _ = await session.call(dict(
                        action="send_message",
                        channel_id=channel_id,
                        message_type="ninchat.com/text",
                    ), [
                        json.dumps({"text": line}).encode(),
                    ])
                    if event["event"] == "error":
                        error("send_message {}".format(channel_id), event)

        if args.listen:
            wakeup = asyncio.get_event_loop().create_future()
            asyncio.get_event_loop().add_signal_handler(signal.SIGINT, lambda: wakeup.set_result(None))
            await wakeup

        if args.part:
            for channel_id in args.channels:
                event, _ = await session.call(dict(
                    action="part_channel",
                    channel_id=channel_id,
                ))
                if event["event"] == "error":
                    error("part_channel {}".format(channel_id), event)

        if args.delete_user:
            with open(args.user) as file:
                event, _ = await session.call(dict(
                    action="delete_user",
                    user_auth=file.readlines()[1].strip(),
                ))
                if event["event"] == "error":
                    error("delete_user", event)
    finally:
        await session.close()


if __name__ == "__main__":
    asyncio.get_event_loop().run_until_complete(main())
    if errors:
        sys.exit(3)
